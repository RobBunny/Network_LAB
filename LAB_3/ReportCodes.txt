//CLIENT
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class LAB3AssignmentClient {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket("localhost", 5000);
            DataInputStream dis = new DataInputStream(socket.getInputStream());
            DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
            System.out.println(dis.readUTF());
            Thread receiveThread = new Thread(() -> {
                try {
                    while (true) {
                        String msg = dis.readUTF();
                        System.out.println(msg);
                    }
                } catch (IOException e) {
                    System.out.println("Disconnected from server.");
                }
            });
            receiveThread.start();
            Scanner scanner = new Scanner(System.in);
            while (true) {
                String message = scanner.nextLine();
                dos.writeUTF(message);
                dos.flush();
                if (message.equalsIgnoreCase("exit")) {
                    System.out.println("You left the chat.");
                    dis.close();
                    dos.close();
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

//SERVER
import java.io.*;
import java.net.*;
import java.util.*;

class ClientHandler extends Thread {
    Socket socket;
    DataInputStream dis;
    DataOutputStream dos;
    static List<ClientHandler> clients = new ArrayList<>();

    ClientHandler(Socket socket) {
        try {
            this.socket = socket;
            this.dis = new DataInputStream(socket.getInputStream());
            this.dos = new DataOutputStream(socket.getOutputStream());
            synchronized (clients) {
                clients.add(this);
            }
            System.out.println("Client connected: " + socket.getPort());
            dos.writeUTF("Connected to server. Your port: " + socket.getPort());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void run() {
        try {
            String message;
            while (true) {
                message = dis.readUTF();
                if (message.equalsIgnoreCase("exit")) {
                    System.out.println("Client " + socket.getPort() + " exited.");
                    break;
                }
                System.out.println("Received from client " + socket.getPort() + ": " + message);
                sendToOtherClients(message, socket.getPort());
            }
        } catch (IOException e) {
            System.out.println("Client disconnected unexpectedly: " + socket.getPort());
        } finally {
            try {
                dis.close();
                dos.close();
                socket.close();
                synchronized (clients) {
                    clients.remove(this);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    void sendToOtherClients(String message, int senderPort) {
        synchronized (clients) {
            for (ClientHandler client : clients) {
                if (client.socket.getPort() != senderPort) {
                    try {
                        client.dos.writeUTF("Client " + senderPort + ": " + message);
                        client.dos.flush();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    static void sendToClient(int port, String message) {
        synchronized (clients) {
            for (ClientHandler client : clients) {
                if (client.socket.getPort() == port) {
                    try {
                        client.dos.writeUTF("Server (private): " + message);
                        client.dos.flush();
                        System.out.println("Message sent to client " + port);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    return;
                }
            }
            System.out.println("Client with port " + port + " not found.");
        }
    }
}


public class LAB3AssignmentServer {
    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(5000)) {
            System.out.println("Server started. Waiting for clients...");
            Thread serverInput = new Thread(() -> {
                Scanner scanner = new Scanner(System.in);
                while (true) {
                    System.out.println("Enter command: send <port> <message>");
                    String input = scanner.nextLine();
                    if (input.startsWith("send ")) {
                        String[] parts = input.split(" ", 3);
                        if (parts.length == 3) {
                            try {
                                int port = Integer.parseInt(parts[1]);
                                String msg = parts[2];
                                ClientHandler.sendToClient(port, msg);
                            } catch (NumberFormatException e) {
                                System.out.println("Invalid port number.");
                            }
                        } else {
                            System.out.println("Invalid command format. Use: send <port> <message>");
                        }
                    } else {
                        System.out.println("Unknown command. Use: send <port> <message>");
                    }
                }
            });
            serverInput.start();
            while (true) {
                Socket socket = serverSocket.accept();
                ClientHandler clientHandler = new ClientHandler(socket);
                clientHandler.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
